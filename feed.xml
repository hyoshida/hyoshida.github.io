<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>@cyber_yoshida</title>
  <subtitle>『コードは美しく奏でるように』目指せV系プログラマ！ Ruby, Rails, FreeBSD まわりの技術録を主とした個人ブログです。</subtitle>
  <id>http://hyoshida.github.io</id>
  <link href="http://hyoshida.github.io"/>
  <link href="http://hyoshida.github.io/feed.xml" rel="self"/>
  <updated>2015-02-01T15:00:00Z</updated>
  <author>
    <name>サイバーよしだ</name>
  </author>
  <entry>
    <title>プロジェクトにRubocopを導入することのメリットとデメリット</title>
    <link rel="alternate" href="http://hyoshida.github.io/2015/02/02/how-to-use-rubocop-by-team.html"/>
    <id>http://hyoshida.github.io/2015/02/02/how-to-use-rubocop-by-team.html</id>
    <published>2015-02-01T15:00:00Z</published>
    <updated>2015-02-02T10:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;

&lt;p&gt;チームでプログラミングをするときに立ちはだかる壁のひとつに「コードの統一」があると思います。
どんなに有能な人が複雑な機能を瞬く間に作り上げたとしても、チームで開発し保守する以上は、それが他人に理解できるものでなければあまり意味がありません。
なぜならばたったひとりしか理解できないコードは、その人にしか保守できないからです。&lt;/p&gt;

&lt;p&gt;この「コードの統一」を図るために出てくるのがコーディングルールかと思います。
コーディングルールがあれば、皆が理解できるコードを共有し合うことができます。
が、このルールを作るのも守るのも面倒くさい！&lt;/p&gt;

&lt;p&gt;そこで導入を検討したのが Rubocop です。
この gem は Ruby のコードを静的に評価して「ここはこう書いた方が良いよ」というアドバイスをくれるというものです。&lt;/p&gt;

&lt;p&gt;「これがあればコーディングルールなしにキレイなコードを担保できるかも？！」という希望をもとに、新しいプロジェクトで実際に使ってみることにしました。
この記事では、Rubocop をチームで運用してみて感じたメリットとデメリットを紹介したいと思います。&lt;/p&gt;

&lt;h2 id="rubocopとは"&gt;Rubocopとは&lt;/h2&gt;

&lt;p&gt;Rubocop 自体の説明は割愛します。&lt;/p&gt;

&lt;p&gt;どんなものかをご存知でない方は下記記事などをご参照ください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rubocopを使ってコーディングルールへの準拠チェックを自動化&lt;/p&gt;

&lt;p&gt;&lt;a href="http://qiita.com/yaotti/items/4f69a145a22f9c8f8333" rel="nofollow" target="_blank"&gt;http://qiita.com/yaotti/items/4f69a145a22f9c8f8333&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="rubocopの運用方法"&gt;Rubocopの運用方法&lt;/h2&gt;

&lt;p&gt;今回のプロジェクトでは Rubocop を自動テストの一端として組み込む形で利用しました。
この自動テストと GitLab のマージリクエスト (GitHub でいうプルリクエスト) を組み合わせることで
「テストが成功するまでマージできませーん」という流れができるので、
Rubocop によるコーディングルールを守らざるを得ない環境を作ることができます。&lt;/p&gt;

&lt;p&gt;ただし、Rubocop のデフォルト設定はチームで運用するには敷居が高い内容となっているので最初にある程度縛りを緩くしておき、
また途中からでもメンバーからの意見が多ければ設定を変更する体制を取りました。&lt;/p&gt;

&lt;h2 id="rubocopのメリット"&gt;Rubocopのメリット&lt;/h2&gt;

&lt;p&gt;ようやく本題になります。&lt;/p&gt;

&lt;p&gt;メリットとしては今回挙げるのは下記の３つになります。&lt;/p&gt;

&lt;h3 id="1.-コーディングスタイルをある程度統一できる"&gt;1. コーディングスタイルを&lt;strong&gt;ある程&lt;/strong&gt;度統一できる&lt;/h3&gt;

&lt;p&gt;長いメソッド/モジュールの分割をほぼ強制されるので、
数百行のメソッドや数千行のモジュールがプロジェクト内に生まれることがありませんでした。&lt;/p&gt;

&lt;h3 id="2.-ruby-歴が短い人、改善意識の高い人の良い矯正になる"&gt;2. Ruby 歴が短い人、改善意識の高い人の良い矯正になる&lt;/h3&gt;

&lt;p&gt;Rubocop が提案してくる内容を素直に受け止められる人は、Rubocop 色に染まることで、
どんどん怒られにくいコードを自発的に書く方向に矯正できているように感じました。
メソッドひとつひとつがシンプルになったり、早い時期からメソッド郡のモジュール化を考えたりするようになったり、と良い感じです。&lt;/p&gt;

&lt;h3 id="3.-ruby-の新しい構文、便利な構文を知る良い機会になる"&gt;3. Ruby の新しい構文、便利な構文を知る良い機会になる&lt;/h3&gt;

&lt;p&gt;Rubocop を使っていると「こういう風に書きたいならこう書いた方が分かりやすいよ」という提案を受けることがあります。
これによっていままで知らなかったメソッドや慣習などを学ぶ機会を得ることができました。&lt;/p&gt;

&lt;h2 id="rubocopのデメリット"&gt;Rubocopのデメリット&lt;/h2&gt;

&lt;p&gt;Rubocop 単体のデメリット、というよりも、チームで使う際の注意点というような観点になります。&lt;/p&gt;

&lt;p&gt;メリットと同じく、こちらも３つ挙げています。&lt;/p&gt;

&lt;h3 id="1.-コーディングスタイルをある程度しか統一できない"&gt;1. コーディングスタイルを&lt;strong&gt;ある程度しか&lt;/strong&gt;統一できない&lt;/h3&gt;

&lt;p&gt;「メソッドが長いなら分ければ良いんでしょ」と安易に考え、
「method1」「method2」「method3」...のように無意味な名前でメソッドを分割するケースがありました。
残念ながらいま現在の Rubocop はそれを良しとして通してしまうため、
ただ単にメソッド１つの長さが短いだけの、本質的に意味のないメソッド分割を許容してしまうことがあります。&lt;/p&gt;

&lt;p&gt;この辺は、「なぜ Rubocop を使うのか」についてチームで共通認識を持っておくべきだと感じました。&lt;/p&gt;

&lt;h3 id="2.-ruby-歴が長い人、改善意識の低い人の阻害となる"&gt;2. Ruby 歴が長い人、改善意識の低い人の阻害となる&lt;/h3&gt;

&lt;p&gt;Rubocop の提案を良しとしない人（たとえば手続き的な記述で書いた方が、
それでメソッドが長くなったとしても分かりやすいと考える人、など）とは、当然衝突することになります。
これは本人にとってもストレスですし、嫌々で書いたコードが良いものになるとも思えません。&lt;/p&gt;

&lt;p&gt;ただしこれはどんなコーディングルールにも共通することなのかなと思います。
基本的にはルールを尊重しつつ、どうしてもという場合にはルールを見直していくしかないと思います。&lt;/p&gt;

&lt;h3 id="3.-急いでいるときなどに本質的でない指摘で開発が止まる"&gt;3. 急いでいるときなどに本質的でない指摘で開発が止まる&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Aさん「急ぎでこの処理を追加して欲しいんだけど」&lt;/p&gt;

&lt;p&gt;Bさん「１行追加するだけでできました！」&lt;/p&gt;

&lt;p&gt;Rubocop「メソッドが長いのでエラーです」&lt;/p&gt;

&lt;p&gt;Aさん「・・・」&lt;/p&gt;

&lt;p&gt;Bさん「・・・」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということが何度かありました（あと１行だけでも追加すれば Rubocop に怒られる、という罠が巧妙に仕込んである）。&lt;/p&gt;

&lt;p&gt;こうなってしまえばリファクタリングを余儀なくされることになるので、後のことを考えれば良いことなのですが、その場では大きなストレスになります。&lt;/p&gt;

&lt;h2 id="さいごに"&gt;さいごに&lt;/h2&gt;

&lt;p&gt;Rubocop は自分ひとりで利用するのであれば本当に良い味方になると思います。
とくに最近のバージョンはABCメトリクス値の計測も取り入れられて、よりいっそう養成ギブスとしての能力を増しています。
あと、僕個人としては Rubocop が大好きなので心の中でもっと広まれ！と思っています（もっと広まれ！）。&lt;/p&gt;

&lt;p&gt;ただしチームやプロジェクトで利用するには使い方に工夫が必要だと感じました。
チームメンバーにコーディングルールの意識をしっかりと共有しておくことである程度は回避可能だと思いますが、もっと良い方法があればぜひ教えてください！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails4のマイグレーションの書き方まとめ</title>
    <link rel="alternate" href="http://hyoshida.github.io/2014/12/27/writting-a-migration-in-rails-4.html"/>
    <id>http://hyoshida.github.io/2014/12/27/writting-a-migration-in-rails-4.html</id>
    <published>2014-12-26T15:00:00Z</published>
    <updated>2015-02-02T10:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;

&lt;p&gt;Ruby 2.2.0 が登場し、Rails 5 の噂も聞くようになった今日この頃ですが、ここで Rails 4 のマイグレーションの書き方についておさらいしておきたいと思います。
Rails 4 系で新しくプロジェクトを作成しようとしている方は必見かもです。&lt;/p&gt;

&lt;h2 id="マイグレーションとは？"&gt;マイグレーションとは？&lt;/h2&gt;

&lt;p&gt;この記事ではデータベースのスキーマ・マイグレーションを指します。&lt;/p&gt;

&lt;p&gt;そもそもデータベースのテーブル/カラムを定義するのになぜわざわざ「マイグレーション(移住/転住)」が必要なのか、という話についてはこちらの記事が詳しいのでご参照ください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;マイグレーション機能とは&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.rubylife.jp/rails/model/index5.html" rel="nofollow" target="_blank"&gt;http://www.rubylife.jp/rails/model/index5.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="rails-2,-3-のマイグレーション"&gt;Rails 2, 3 のマイグレーション&lt;/h2&gt;

&lt;p&gt;ちょっと前のプロジェクトでは下記のようなマイグレーションファイルをよく見かけました。
例えば新しくテーブルを作る場合はこんな具合です。&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;up&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;column&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;down&lt;/span&gt;
    &lt;span class="n"&gt;remove_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;
    &lt;span class="n"&gt;drop_table&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;admin_users&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;そしてそのテーブルに後からカラムやインデックスを追加するときにこのように書いていました。&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddNameToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;up&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;down&lt;/span&gt;
    &lt;span class="n"&gt;remove_index&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
    &lt;span class="n"&gt;remove_column&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;この書き方は Rails 4 でも可能ではありますが、もう少し分かりやすい形式に書き直すことができます。&lt;/p&gt;

&lt;h2 id="rails-4-のマイグレーション"&gt;Rails 4 のマイグレーション&lt;/h2&gt;

&lt;p&gt;先ほど紹介したマイグレーションファイルを、Rails 4 では下記のように書き直すことができます。&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;column&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;先ほどのマイグレーションファイルとの違いを見ていきましょう。
&lt;code&gt;self.up&lt;/code&gt; と &lt;code&gt;self.down&lt;/code&gt; というメソッドがなくなり、代わりに &lt;code&gt;change&lt;/code&gt; というメソッド１つになりました。
また、インデックス作成のための &lt;code&gt;add_index&lt;/code&gt; がなくなり、代わりに &lt;code&gt;create_table&lt;/code&gt; のブロックの中に &lt;code&gt;t.index&lt;/code&gt; というメソッドの呼び出しが増えています。
先ほどのマイグレーションファイルと比べると、記述の量が減り、大分シンプルになっています。&lt;/p&gt;

&lt;p&gt;もちろんこの構文はロールバックにも対応しており、ロールバック時にはテーブルの削除を行ってくれます。&lt;/p&gt;

&lt;p&gt;次にカラム/インデックスを追加する場合の構文について紹介します。&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddNameToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;change_table&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;column&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;新しく &lt;code&gt;change_table&lt;/code&gt; というメソッドが登場しています。
このメソッドを使うことで &lt;code&gt;create_table&lt;/code&gt; とまったく同じ構文でカラムやインデックスの追加が可能になります。&lt;/p&gt;

&lt;p&gt;こちらもロールバック可能で、ロールバック時には &lt;code&gt;change_table&lt;/code&gt; で追加したカラムやインデックスだけを消してくれます。&lt;/p&gt;

&lt;h2 id="カラムに削除や変更が必要なときはどうするか"&gt;カラムに削除や変更が必要なときはどうするか&lt;/h2&gt;

&lt;p&gt;Rails 4 ではテーブルの作成やカラムの追加が、キレイにまとまった形で記述できることが分かりました。
ではカラムを削除したり変更する場合はどのようにしたら良いでしょうか。&lt;/p&gt;

&lt;p&gt;カラムの属性変更は、テーブルの作成やカラムの追加と同じように &lt;code&gt;change_table&lt;/code&gt; を使いながら次のように書くことができます。&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChangeNameOnUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;reversible&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;change_table&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;up&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;change&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;down&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;change&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;reversible&lt;/code&gt; メソッドを利用することで、&lt;code&gt;self.up&lt;/code&gt; や &lt;code&gt;self.down&lt;/code&gt; のようにマイグレーションの方向によって処理内容を変えることができます。
これによって &lt;code&gt;change_table&lt;/code&gt; を使いながらカラムの属性を変更したりロールバックしたりすることができるようになります。&lt;/p&gt;

&lt;p&gt;そしてカラムを削除するときにも、同じ構文が利用できます。
その際には &lt;code&gt;t.remove&lt;/code&gt; というメソッドを利用します。&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemoveNameFromUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;reversible&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;change_table&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;up&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;down&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;ただし、&lt;code&gt;reversible&lt;/code&gt; を利用すると少し構文が複雑になってしまいます。
これが嫌な場合は、カラムの削除を下記のように書くことも可能です。&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemoveNameFromUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;remove_column&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;削除の構文なのにカラムの型やその他オプションを指定しているのが不思議に感じますが、これはロールバックの際に利用される情報になります。
&lt;code&gt;reversible&lt;/code&gt; メソッドを利用するよりは大分シンプルになりました。&lt;/p&gt;

&lt;h2 id="さいごに"&gt;さいごに&lt;/h2&gt;

&lt;p&gt;Rails 4 のおさらいということでマイグレーションファイルの書き方についてまとめてみました。
プロジェクトによってはDB設計が変わることはそうそうないことだとは思いますが、だからこそ忘れがちなので、覚え書きとして活用いただければと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>First Post</title>
    <link rel="alternate" href="http://hyoshida.github.io/2014/11/16/first-post.html"/>
    <id>http://hyoshida.github.io/2014/11/16/first-post.html</id>
    <published>2014-11-15T15:00:00Z</published>
    <updated>2015-02-02T10:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Hello world.&lt;/p&gt;

&lt;p&gt;A source code example:&lt;/p&gt;
&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hoge&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s2"&gt;"Hello world."&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;hoge&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "Hello world."&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Example Article 3</title>
    <link rel="alternate" href="http://hyoshida.github.io/2014/01/03/example-article.html"/>
    <id>http://hyoshida.github.io/2014/01/03/example-article.html</id>
    <published>2014-01-02T15:00:00Z</published>
    <updated>2015-02-02T10:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Example Article 2</title>
    <link rel="alternate" href="http://hyoshida.github.io/2014/01/02/example-article.html"/>
    <id>http://hyoshida.github.io/2014/01/02/example-article.html</id>
    <published>2014-01-01T15:00:00Z</published>
    <updated>2015-02-02T10:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Example Article 1</title>
    <link rel="alternate" href="http://hyoshida.github.io/2014/01/01/example-article.html"/>
    <id>http://hyoshida.github.io/2014/01/01/example-article.html</id>
    <published>2013-12-31T15:00:00Z</published>
    <updated>2015-02-02T10:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
</content>
  </entry>
</feed>
